## Challenge pass 

sp {evaluate-operator*propose*compute-challenge-pass-likelihood
   (state <s> ^name evaluate-operator
             -^estimated-total
              ^top-state.io.input-link.history <history>
              ^operator <op> +)
   (<op> ^type compute-probability
        ^superoperator <so>)
   (<history> ^action pass  
              ^player.name <name>) #Make sure we challenge the last pass 
   (<so> ^name challenge
         ^target <t>)
   (<t> ^name <name>)
-->
   (<op> ^name compute-challenge-pass-likelihood
         ^target <t>)
}

## Challenge a pass before a pass
sp {evaluate-operator*propose*compute-challenge-pass-pass-likelihood
   (state <s> ^name evaluate-operator
             -^estimated-total
              ^top-state.io.input-link.history.next <history> # next gives previous bid
              ^operator <op> +)
   (<op> ^type compute-probability
        ^superoperator <so>)
   (<history> ^action pass  
              ^player.name <name>) #Make sure we challenge the last pass 
   (<so> ^name challenge
         ^target <t>)
   (<t> ^name <name>)
-->
    (<op> ^name compute-challenge-pass-likelihood
         ^target <t>)
}

sp {apply*compute-challenge-pass-likelihood*impossible*pass*prob-only
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <e>
              ^top-state.io.input-link.history.action pass)
   (<op> ^name compute-challenge-pass-likelihood
         ^target.pushed <push1>)
   (<push1> ^die.face <n>
            ^die.face <> <n>)
-->
   (write (crlf) |  Challenge success likelihood is 1.0.|)
   (<e> ^probability 1.0)}

#############
sp {apply*compute-challenge-pass-likelihood*unlikely*pass*all-under*more-two
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <e>
              ^top-state.io.input-link.history.action pass)
   (<op> ^name compute-challenge-pass-likelihood
         ^target <target>)
   (<target> ^cup.count > 2
             ^pushed.count 0)
-->
   (write (crlf) |  Challenge pass success likelihood is .9.|)
   (<e> ^probability .90)}

sp {apply*compute-challenge-pass-likelihood*reasonable*pass*all-under*2
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <e>
              ^top-state.io.input-link.history.action pass)
   (<op> ^name compute-challenge-pass-likelihood
         ^target <target>)
   (<target> ^cup.count 2
             ^pushed.count 0)
-->
   (write (crlf) |  Challenge success likelihood is .4.|)
   (<e> ^probability .40)}

sp {apply*compute-challenge-pass-likelihood*reasonable*pass*1-under
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <e>
              ^top-state.io.input-link.history.action pass)
   (<op> ^name compute-challenge-pass-likelihood
         ^target <target>)
   (<target> ^cup <cup>)
   (<cup> ^count 1)
  -{(<target> ^pushed <push1>)
    (<push1> ^die.face <n>
             ^die.face <> <n>)}
-->
   (write (crlf) |  Challenge success likelihood is .4.|)
   (<e> ^probability .40)}

sp {apply*compute-challenge-pass-likelihood*unlikely*pass*not-all-under*more-two
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <e>
              ^top-state.io.input-link.history.action pass)
   (<op> ^name compute-challenge-pass-likelihood
         ^target <target>)
   (<target> ^cup.count >= 2
             ^pushed.count > 0)
-->
   (write (crlf) |  Challenge success likelihood is safe.|)
   (<e> ^probability .90)}
