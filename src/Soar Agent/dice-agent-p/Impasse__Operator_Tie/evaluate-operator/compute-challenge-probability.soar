
sp {evaluate-operator*propose*compute-challenge-probability
	#:interrupt
   (state <s> ^name evaluate-operator
              ^top-state.io.input-link.history.action << bid push >>
              ^operator <op> +)
   (<op> ^type compute-probability
         ^superoperator <so>)
   (<so> ^name challenge
         ^target <t>
		 ^last-bid-type bid)
-->   
   (<op> ^name compute-challenge-probability
         ^target <t>)
}

## If there was an intervening PASS consider challenging previous bid
sp {evaluate-operator*propose*compute-challenge-probability*intervening-pass
   (state <s> ^name evaluate-operator
              ^top-state.io.input-link <input>
              ^operator <op> +)
   (<op> ^type compute-probability
         ^superoperator <so>)
   (<input> ^history.action pass
		   -^history.next.action pass
           -^history.player.name <name>  # not just a two player game
            ^state.last-bid <lb>)
   (<lb> ^action << bid push >>
         ^player.name <name>)
   (<so> ^name challenge        # player being challenged is one that made bid
         ^last-bid-type bid
		 ^target <t>)
   (<t> ^name <name>)
-->
   (<op> ^name compute-challenge-probability
         ^target <t>)
}

sp {evaluate-operator*propose*compute-challenge-probability*intervening-push-pass
   (state <s> ^name evaluate-operator
              ^top-state.io.input-link <input>
              ^operator <op> +)
   (<op> ^type compute-probability
         ^superoperator <so>)
   (<input> ^history.action push
		    ^history.next.action pass
		   -^history.next.next.action pass
           -^history.next.player.name <name>  # not just a two player game
            ^state.last-bid <lb>)
   (<lb> ^action << bid push >>
         ^player.name <name>)
   (<so> ^name challenge        # player being challenged is one that made bid
         ^last-bid-type bid
		 ^target <t>)
   (<t> ^name <name>)
-->
   (<op> ^name compute-challenge-probability
         ^target <t>)
}

## Thinking of challenging a one bid

sp {apply*compute-challenge-probability*1*bid
 #  :interrupt
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <eval>
              ^top-state <ts>
              ^dice-counts.dice-count <dc1> <dc2>)
   (<op> ^name compute-challenge-probability
        ^target <t>)
   (<t> ^id <player-id>)
   (<ts> ^io.input-link.state.last-bid <lb>
         ^io.output-link <out>)
   (<dc1> ^face 1
          ^count <multi-1>)
   (<dc2> ^face unknown
          ^count <multi-unknown>)
   (<lb> ^action bid
         ^face 1
        ^player.id <player-id>
         ^multiplier { > <multi-1> <bid-multi> })
-->
   (write (crlf) |  Challenge: | <bid-multi> | 1's.  Unknown: | <multi-unknown> |, Known:| <multi-1>)
   (<s> ^total-known (- <multi-1> <bid-multi>)
        ^total-possible (- (+ <multi-unknown> <multi-1>) <bid-multi>))
   (<eval> ^compute-probability <cp>)
   (<cp> ^count (- <bid-multi> <multi-1>)
          ^number-of-dice <multi-unknown>
          ^number-of-faces 6
          ^predicate lt)
}

## Failed challenge of a 1 bid. 

sp {apply*compute-challenge-probability*1*bid*known-failure
 #     :interrupt
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <e>
              ^top-state <ts>
              ^dice-counts.dice-count <dc1>)
   (<op> ^name compute-challenge-probability
        ^target.id <player-id>)
   (<ts> ^io.input-link.state.last-bid <lb>)
   (<dc1> ^face 1
          ^count <multi-1>)
   (<lb> ^action bid
         ^face 1
         ^player.id <player-id>
         ^multiplier { <= <multi-1> <bid-multi> })
-->
   (write (crlf) |  Challenge (will fail): | <bid-multi> | 1's.  Known:| <multi-1>)
   (<s> ^total-known (- <multi-1> <bid-multi>)
        ^total-possible (- <multi-1> <bid-multi>))
   (<e> ^probability 0.0)
}

## Thinking of challenging a non-one bid with special rules
sp {apply*compute-challenge-probability*special-rules
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <eval>
              ^top-state <ts>
              ^dice-counts.dice-count <dc1> <dc2>)
   (<op> ^name compute-challenge-probability
         ^target <t>)
   (<t> ^id <player-id>)
   (<ts> ^io.input-link.state.last-bid <lb>
         ^io.output-link <out>
         ^io.input-link.state.special true)
   (<dc1> ^face <face>
          ^count <multi-1>)
   (<dc2> ^face unknown
          ^count <multi-unknown>)
   (<lb> ^action bid
         ^face { <> 1 <face> }
         ^player.id <player-id>
         ^multiplier <bid-multi>)
-->
   (write (crlf) |  Challenge: | <bid-multi> | | <face> |'s. Special rules.|)
   (<s> ^total-known (- <multi-1> <bid-multi>)
        ^total-possible (- (+ <multi-unknown> <multi-1>) <bid-multi>))
   (<eval> ^compute-probability <cp>)
   (<cp> ^count (- <bid-multi> <multi-1>)
          ^number-of-dice <multi-unknown>
          ^number-of-faces 6
          ^predicate lt)
}

sp {apply*compute-challenge-probability*special-rules*will-fail
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <e>
              ^top-state <ts>
              ^dice-counts.dice-count <dc1>)
   (<op> ^name compute-challenge-probability
         ^target.id <player-id>)
   (<ts> ^io.input-link.state.last-bid <lb>
         ^io.input-link.state.special true)
   (<dc1> ^face <face>
          ^count <multi-1>)
   (<lb> ^action bid
         ^face { <> 1 <face> }
         ^player.id <player-id>
         ^multiplier { <= <multi-1> <bid-multi> })
-->
   (write (crlf) |  Challenge will fail: | <bid-multi> | | <face> |'s. Special rules.|)
   (<s> ^total-known (- <multi-1> <bid-multi>)
        ^total-possible (- <multi-1> <bid-multi>))
   (<e> ^probability 0.0)
}

## Thinking of challenging a non-one bid with normal rules
sp {apply*compute-challenge-probability*normal-rules
 #  :interrupt
   (state <s> ^operator <op>
              ^superstate.operator.evaluation <eval>
              ^top-state <ts>
              ^dice-counts.dice-count <dc1> <dc2> <dc3>)
   (<op> ^name compute-challenge-probability
         ^target <t>)
   (<t> ^id <player-id>)
   (<ts> ^io.input-link.state.last-bid <lb>
         ^io.input-link.state.special false
         ^io.output-link <out>)
   (<dc1> ^face {<> 1 <face> }
          ^count <multi-face>)
   (<dc2> ^face unknown
          ^count <multi-unknown>)
   (<dc3> ^face 1
          ^count <multi-1>)
   (<lb> ^action bid
         ^face { <> 1 <face> }
         ^player.id <player-id>
         ^multiplier <bid-multi>)
-->
   (write (crlf) |  Challenge: | <bid-multi> | | <face>
   |'s. Normal rules. Need: | (- <bid-multi>  (+ <multi-1> <multi-face> ))
                              |. Out of: |  <multi-unknown>)
   (<s> ^total-known (- (+ <multi-1> <multi-face> ) <bid-multi>)
        ^total-possible (- (+ <multi-unknown> <multi-face> <multi-1>) <bid-multi>))
   (<eval> ^compute-probability <cp>)
   (<cp> ^count (- <bid-multi> (+ <multi-face> <multi-1>))
          ^number-of-dice <multi-unknown>
          ^number-of-faces 3
          ^predicate lt)
}

sp {apply*evaluate-challenge-bid-probability*lose
  #    :interrupt
   (state <s> ^operator <op>
              ^total-known >= 0.0
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-challenge-probability)
-->
   (write (crlf) |  Challenge success likelihood is 0.|)
   (<e> ^probability 0.0) # for me to challenge
}

sp {apply*evaluate-challenge-bid-probability*certain
 #     :interrupt
   (state <s> ^operator <op>
              ^total-possible < 0.0
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-challenge-probability)
-->
   (write (crlf) |  Challenge success likelihood is certain.|)
   (<e> ^probability 1.0) # for me to challenge
}



