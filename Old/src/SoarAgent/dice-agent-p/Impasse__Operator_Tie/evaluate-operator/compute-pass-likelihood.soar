
## Only evaluate after other bids (bid with no pass, challenge)

sp {evaluate-operator*propose*compute-pass-likelihood
   (state <s> ^name evaluate-operator
              ^operator <op> +)
   (<op> ^type compute-probability
         ^superoperator.name pass)
-->
   (<op> ^name compute-pass-likelihood)
}

# Pushed Dice not the same
sp {apply*compute-pass-likelihood*impossible*pass*prob-only
   (state <s> ^operator <op>
              ^top-state.io.input-link.players.me <me>
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-pass-likelihood)
   (<me> ^pushed <push1>)
   (<push1> ^die.face <n>
            ^die.face <> <n>)
-->
   (write (crlf) |  Pass success likelihood is 0.0 - different pushed dice|)
   (<e> ^probability 0.0)}

sp {apply*compute-pass-likelihood*good*pass*prob-only
   (state <s> ^operator <op>
              ^top-state.io.input-link.players.me <me>
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-pass-likelihood)
   (<me> ^dice-counts <dcs>)
   (<dcs> ^<face> { <> 0 <count> })
  -{(<dcs> ^<> <face> <> 0)}
-->
   (write (crlf) |  Pass success likelihood is 1.0 - all dice the same.|)
   (<e> ^probability 1.0)}

# one pushed - one in cup
sp {apply*compute-pass-likelihood*risky*pass
   (state <s> ^operator <op>
              ^top-state.io.input-link.players.me <me>
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-pass-likelihood)
   (<me> ^pushed.count 1
         ^cup.count 1)
  -(<me> ^pushed.die <die>
         ^cup.die <die>)
-->
   (write (crlf) |  Pass success likelihood is risky - one die under cup, one pushed.|)
   (<e> ^probability .4)}

sp {apply*compute-pass-likelihood*risky*pass2*prob-only
   (state <s> ^operator <op>
              ^top-state.io.input-link.players.me <me>
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-pass-likelihood)
   (<me>   ^cup.count 1
           ^pushed.die.face <face>
          -^cup.die.face <face>
          -^pushed.die.face <> <face>)
-->
   (write (crlf) |  Pass success likelihood is risky - one die under cup, all the same pushed.|)
   (<e> ^probability .4)}

# two under cup - none pushed
sp {apply*compute-pass-likelihood*risky*pass*no-push*prob-only
   (state <s> ^operator <op>
              ^top-state.io.input-link.players.me <me>
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-pass-likelihood)
   (<me> ^pushed.count 0
         ^cup.count 2)
  -(<me> ^dice-counts.<x> 2)
-->
   (write (crlf) |  Pass success likelihood is risky - two dice under cup.|)
   (<e> ^probability .4)}

####
sp {apply*compute-pass-likelihood*risky*pass*push*2undercup*prob-only
   (state <s> ^operator <op>
              ^top-state.io.input-link.players.me <me>
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-pass-likelihood)
   (<me> ^pushed.count > 0
         ^cup.count >= 2)
  -{(<me> ^dice-counts <dcs>)
    (<dcs> ^<face> { <> 0 <count> })
   -{(<dcs> ^<> <face> <> 0)}}
-->
   (write (crlf) |  Pass success likelihood is risky - two or more dice under cup.|)
   (<e> ^probability .02)}

## three under cup

sp {apply*compute-pass-likelihood*impossible*pass*very-risky*prob-only
   (state <s> ^operator <op>
              ^top-state.io.input-link.players.me <me>
              ^superstate.operator.evaluation <e>)
   (<op> ^name compute-pass-likelihood)
   (<me> ^pushed.count 0
         ^cup.count { <count> >= 3 })
  -(<me> ^dice-counts.<x> <count>)
-->
   (write (crlf) |  Pass success likelihood is very risky - three or more dice under cup.|)
   (<e> ^probability .02)}